set :application, "set your application name here"
set :user, "set username for servers"

set :repository,  "git://github.com/bbcf/jbrowsor.git"
set :branch, "master"
set :scm, :git
# Or: `accurev`, `bzr`, `cvs`, `darcs`, `git`, `mercurial`, `perforce`, `subversion` or `none`

set :scm_username, "read-only"
set :scm_password, "read-only"

role :web, "your web-server here"                          # Your HTTP server, Apache/etc
role :app, "your app-server here"                          # This may be the same as your `Web` server
role :db,  "your primary db-server here", :primary => true # This is where Rails migrations will run
# role :db,  "your slave db-server here"

set :deploy_to, "path for deployment"
set :use_sudo, false                                       # comment out to use sudo on your server
set :config_dir, "your config files"                       # location of server-side copies of
                                                           # database.yml and config.yml
                                                           # (these files are not in scm)

depend :remote, :command, "git"                            # required to fetch jbrowse code
depend :remote, :gem, "daemons", ">=1.0.10"                # required for job_runner
depend :remote, :gem, "sqlite3", ">=1.0.0"                 # required for job_runner

default_environment['RAILS_ENV'] = "production"            # Necessary for jbrowse:install etc
default_environment['RUBYOPT'] = "rubygems"                # Remove depending on gems config on servers

# If you are using Passenger mod_rails uncomment this:
# if you're still using the script/reapear helper you will need
# these http://github.com/rails/irs_process_scripts

#namespace :deploy do
#  task :start {}
#  task :stop {}
#  task :restart, :roles => :app, :except => { :no_release => true } do
#    run "#{try_sudo} touch #{File.join(current_path,'tmp','restart.txt')}"
#  end
#end

after "deploy:update_code", :install_jbrowse, :configure_database, :configure_globals

desc "Installs the jbrowse software in the correct place on the server"
task :install_jbrowse, :roles => :app do
  run("cd #{release_path}; /usr/bin/rake jbrowse:install RAILS_ENV=production")
end

desc "Uninstalls the jbrowse software in the correct place on the server"
task :uninstall_jbrowse, :roles => :app do
  run("cd #{release_path}; /usr/bin/rake --trace jbrowse:uninstall")
end

desc "Copies the database configuration file to the server"
task :configure_database, :roles => :app do
  run "cp #{config_dir}/database.yml #{release_path}/config/database.yml"
end

desc "Copies the application configuration file to the server"
task :configure_globals, :roles => :app do
  run "cp #{config_dir}/config.yml #{release_path}/config/config.yml"
end

namespace :daemons do
  require "fileutils"
  require "pathname"

  desc "Start Daemon to run data preparation jobs"
  task :jobs_start do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./job_runner.rb start")
  end

  desc "Restart Daemon to run data preparation jobs"
  task :jobs_restart do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./job_runner.rb restart")
  end

  desc "Stop Daemon to run data preparation jobs"
  task :jobs_stop do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./job_runner.rb stop")
  end

  desc "Stop Daemon to run data preparation jobs"
  task :jobs_status do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./job_runner.rb status")
  end

  desc "Run data preparation jobs script without daemonizing"
  task :jobs_run do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./job_runner.rb run")
  end

########

  desc "Start Java Daemon to generate sqlite databases for various zoom levels from quantitative sqlite data"
  task :compute_to_sqlite_start do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./compute_to_sqlite.rb start")
  end

  desc "Restart Java Daemon to generate sqlite databases for various zoom levels from quantitative sqlite data"
  task :compute_to_sqlite_restart do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./compute_to_sqlite.rb restart")
  end

  desc "Stop Java Daemon to generate sqlite databases for various zoom levels from quantitative sqlite data"
  task :compute_to_sqlite_stop do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./compute_to_sqlite.rb stop")
  end

  desc "Stop Java Daemon to generate sqlite databases for various zoom levels from quantitative sqlite data"
  task :compute_to_sqlite_status do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./compute_to_sqlite.rb status")
  end

  desc "Run Java Daemon to generate sqlite databases for various zoom levels from quantitative sqlite data without daemonizing"
  task :compute_to_sqlite_run do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./compute_to_sqlite.rb run")
  end

########

  desc "Start Java Daemon to generate sqlite databases for various zoom levels from *.bed, *.wig or *.gff files"
  task :transform_to_sqlite_start do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./transform_to_sqlite.rb start")
  end

  desc "Restart Java Daemon to generate sqlite databases for various zoom levels from *.bed, *.wig or *.gff files"
  task :transform_to_sqlite_restart do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./transform_to_sqlite.rb restart")
  end

  desc "Stop Java Daemon to generate sqlite databases for various zoom levels from *.bed, *.wig or *.gff files"
  task :transform_to_sqlite_stop do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./transform_to_sqlite.rb stop")
  end

  desc "Stop Java Daemon to generate sqlite databases for various zoom levels from *.bed, *.wig or *.gff files"
  task :transform_to_sqlite_status do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./transform_to_sqlite.rb status")
  end

  desc "Run Java Daemon to generate sqlite databases for various zoom levels from *.bed, *.wig or *.gff files without daemonizing"
  task :transform_to_sqlite_run do
    run("cd #{Pathname.new(current_release) + "app" + "maintenance"}; ./transform_to_sqlite.rb run")
  end

  desc "Start all daemons"
  task :start_all do
    jobs_start
    compute_to_sqlite_start
    transform_to_sqlite_start
  end

  desc "Restart all daemons"
  task :restart_all do
    jobs_restart
    compute_to_sqlite_restart
    transform_to_sqlite_restart
  end

  desc "Stop all daemons"
  task :stop_all do
    jobs_stop
    compute_to_sqlite_stop
    transform_to_sqlite_stop
  end

  desc "Get status for all daemons"
  task :status_all do
    jobs_status
    compute_to_sqlite_status
    transform_to_sqlite_status
  end

end
